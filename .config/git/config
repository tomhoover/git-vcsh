# vim: set fdm=marker:

[alias] ; {{{
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    #l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # thanks to Pete Doherty - see http://gitready.com/intermediate/2009/03/04/pick-out-individual-commits.html
    #ll = log --graph --pretty=format':%C(yellow)%h%Cblue%d%Creset %s %C(white) %an, %ar%Creset'

    # thanks to Ted Naleid - https://github.com/tednaleid/understanding-git
    l = log --graph --pretty='%Cred%h%Creset %C(yellow)%d%Creset %s %Cblue[%an]%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
    la = !git l --all

    ci = commit
    co = checkout
    # View the current working tree status using the short format
    s = status -s
    st = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    # go = "!f() { git checkout -b \"$@\" 2> /dev/null || git checkout \"$@\"; }; f"
    go = "!f() { git switch -c \"$@\" 2> /dev/null || git switch \"$@\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -avv
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Merge GitHub pull request on top of the `master` branch
    mpr = "!f() { \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git rebase master pr/$1 && \
            git checkout master && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
        fi \
    }; f"

    # what it says -- undo the last commit
    undo-commit = reset HEAD~

    # various git diff commands
    dom = diff origin/master
    dum = diff upstream/master
    dom-st = diff --name-status origin/master
    dum-st = diff --name-status upstream/master

    # create raw patches (i.e. override diff-so-fancy)
    #    use as 'git patch > changes.patch'
    patch = !git --no-pager diff --no-color

    travis = !"git commit --allow-empty -m 're-run travis-ci'; git push"

    track = update-index --no-assume-unchanged
    untrack = update-index --assume-unchanged
    ls-untracked = !"git ls-files -v | grep '^[[:lower:]]'"

    # rename branches created by github/hub to match normal branch name convention
    hub-rename = !"git remote rename origin upstream && git remote rename tomhoover origin"

    # fetch all remotes
    f = fetch --all --prune

    # https://stackoverflow.com/questions/957928/is-there-a-way-to-get-the-git-root-directory-in-one-command
    root = rev-parse --show-toplevel
    # so I can do things like 'git exec make'. This works because shell aliases are always executed in the top-level directory.
    exec = "!exec "

; }}}

[apply] ; {{{
    # Detect whitespace errors when applying a patch
    whitespace = fix
; }}}

[core] ; {{{
    # use default location $XDG_CONFIG_HOME/git/[ignore|attributes] OR $HOME/.config/git/[ignore|attributes],
    #   instead of:
    # excludesfile = ~/.gitignore
    # attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # thanks to cdunn2001 - see http://stackoverflow.com/questions/136178/git-diff-handling-long-lines
    # pager = less -eiFRSX
    # pager = diff-so-fancy | less --tabs=4 -RFX
    pager = diff-so-fancy | less --tabs=4 -eiFRSX

    # disabled per https://www.edwardthomson.com/blog/advent_day_1_gitattributes_for_text_files.html
    # autocrlf = input
; }}}

[color] ; {{{
    ui = auto

[color "branch"] ; {{{
    current = yellow reverse
    local = yellow
    remote = green
; }}}

[color "diff"] ; {{{
    meta = yellow
    frag = magenta              # line info
    old = red
    new = green
    whitespace = red reverse
    commit = blue
; }}}

[color "diff-highlight"] ; {{{
    oldNormal = red
    oldHighlight = red 52
    newNormal = green
    newHighlight = green 22
; }}}

[color "status"] ; {{{
    added = yellow
    changed = green
    untracked = cyan
; }}}

; }}}

[credential] ; {{{
    helper = osxkeychain
; }}}

[diff] ; {{{
    # Detect copies as well as renames
    renames = copies
; }}}

[help] ; {{{
    # Automatically correct and execute mistyped commands
    autocorrect = 1
; }}}

[init] ; {{{
    defaultBranch = master
    templateDir = ~/.config/git/template
; }}}

[interactive] ; {{{
    diffFilter = diff-so-fancy --patch
; }}}

[merge] ; {{{
    # Include summaries of merged commits in newly created merge commit messages
    log = true
    # Use the OS X graphical three-way merge tool for graphical merges.
    tool = p4merge
    ff = only
; }}}

[mergetool] ; {{{
    # Don't prompt before opening the merge tool.
    prompt = false
    # Don't keep backups of the merge tool inputs.
    keepBackup = false
    # Don't keep the merge tool temporary input/output files.
    keepTemporaries = false

[mergetool "opendiff"] ; {{{
    # Use a script to setup opendiff correctly for Git merges.
    path = git-mergetool-opendiff
; }}}

; }}}

[pull] ; {{{
    ff = only
; }}}

[push] ; {{{
    default = simple
; }}}

[url "ssh://git@gitea:2222/"] ; {{{
    insteadOf = "gitea:"
    pushInsteadOf = "http://gitea:3000/"
; }}}

[url "ssh://git@gitea.t0m.us:2222/"] ; {{{
    insteadOf = "gitea.t0m.us:"
    pushInsteadOf = "http://gitea.t0m.us:3000/"
; }}}

[url "git@github.com:"] ; {{{
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
    pushInsteadOf = "https://github.com/"
; }}}

[url "git://github.com/"] ; {{{
    insteadOf = "github:"
; }}}

[url "git@gist.github.com:"] ; {{{
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
; }}}

[url "git://gist.github.com/"] ; {{{
    insteadOf = "gist:"
; }}}

[user] ; {{{
    useConfigOnly = true
; }}}

[include] ; {{{
    path = ~/.config/git/user
; }}}

; superceded stuff {{{
#[commit]
#    gpgSign = true

#[pager]
#    diff = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified): '
#    log = diff-highlight | less
#    show = diff-highlight | less
#    diff = diff-highlight | less
; }}}
